# GraphQL Cost Analysis
directive @cost(
    multipliers: [String!],
    useMultipliers: Boolean,
    complexity: Int
) on OBJECT | FIELD_DEFINITION

type Query {
    school(id: ID!): School @cost(complexity: 2)
    bus(id: ID!): Bus @cost(complexity: 2)
    stop(id: ID!): Stop @cost(complexity: 2)
    alert(id: ID!): Alert @cost(complexity: 2)
    dismissalTimeData(id: ID!): DismissalTimeData @cost(complexity: 2)

    test: String!
}

type Mutation {
    createSchool(school: SchoolInput!): School!
    updateSchool(schoolID: ID!, school: SchoolInput!): School!

    createBus(schoolID: ID!, bus: BusInput!): Bus!
    updateBus(busID: ID!, bus: BusInput!): Bus!
    updateBusStatus(busID: ID!, status: BusStatusInput!): Bus!
    deleteBus(busID: ID!): ID!

    createStop(busID: ID!, stop: StopInput!): Stop!
    updateStop(stopID: ID!, stop: StopInput!): Stop!
    deleteStop(stopID: ID!): ID!

    createAlert(schoolID: ID!, alert: AlertInput!): Alert!
    updateAlert(alertID: ID!, alert: AlertInput!): Alert!
    deleteAlert(alertID: ID!): ID!

    addDismissalTimeData(schoolID: ID!, data: DismissalTimeDataInput!): DismissalTimeData!
    updateDismissalTimeData(dataID: ID!, data: DismissalTimeDataInput!): DismissalTimeData!
    deleteDismissalTimeData(dataID: ID!): ID!
}

scalar DateTime
scalar Time

type Location {
    lat: Float!
    long: Float!
}

input LocationInput {
    lat: Float!
    long: Float!
}

type School {
    id: ID!
    name: String
    location: Location
    available: Boolean!

    buses: [Bus!]! @cost(complexity: 4)
    alerts: [Alert!]! @cost(complexity: 4)
    dismissalTimeData(date: DateTime): DismissalTimeData @cost(complexity: 3)
    allDismissalTimeData: [DismissalTimeData!]! @cost(complexity: 4)
    
    timeZone: String
}

input SchoolInput {
    name: String
    location: LocationInput
    available: Boolean!
    timeZone: String
    publicScopes: [String!]!
}

type LocationHistoryEntry {
    busID: ID!
    bus: Bus! @cost(complexity: 4)
    locations: [String!]!
    time: DateTime
    source: String
}

type Bus {
    id: ID!
    schoolID: ID!
    school: School! @cost(complexity: 4)
    locations: [String!]!
    otherNames: [String!]!
    invalidateTime: DateTime
    available: Boolean!
    name: String
    company: String
    phone: [String!]!
    numbers: [String!]!

    recentHistory: [LocationHistoryEntry!]! @cost(complexity: 4)
    stops: [Stop!]! @cost(complexity: 4)
}

input BusInput {
    otherNames: [String!]!
    available: Boolean!
    name: String
    company: String
    phone: [String!]!
}

input BusStatusInput {
    invalidateTime: DateTime
    locations: [String!]!
}

type Stop {
    id: ID!
    busID: ID!
    bus: Bus! @cost(complexity: 4)
    name: String
    description: String
    location: Location
    order: Float
    arrivalTime: DateTime
    invalidateTime: DateTime
    available: Boolean!
}

input StopInput {
    name: String
    description: String
    location: LocationInput
    order: Float
    arrivalTime: DateTime
    invalidateTime: DateTime
    available: Boolean!
}

type DismissalTimeData {
    id: ID!
    schoolID: ID!
    school: School! @cost(complexity: 4)
    startDate: DateTime!
    endDate: DateTime!
    dismissalTime: Time
    alertStartTime: Time
    alertEndTime: Time
    daysOfWeek: [Int!]!
}

input DismissalTimeDataInput {
    startDate: DateTime!
    endDate: DateTime!
    dismissalTime: Time
    alertStartTime: Time
    alertEndTime: Time
    daysOfWeek: [Int!]!
}

type AlertAppearanceColor {
    appearance: String!
    name: String
    r: Int!
    g: Int!
    b: Int!
    alpha: Int!
}

input AlertAppearanceColorInput {
    appearance: String!
    name: String
    r: Int!
    g: Int!
    b: Int!
    alpha: Int!
}

type ResolvedColor {
    appearance: String
    name: String
    r: Int!
    g: Int!
    b: Int!
    alpha: Int!
}

type AlertColor {
    name: String
    r: Int!
    g: Int!
    b: Int!
    alpha: Int!
    appearances: [AlertAppearanceColor!]!
    color(appearance: String!): ResolvedColor!
}

input AlertColorInput {
    name: String
    r: Int!
    g: Int!
    b: Int!
    alpha: Int!
    appearances: [AlertAppearanceColorInput!]!
}

type AlertType {
    name: String
    color: AlertColor
}

input AlertTypeInput {
    name: String!
    color: AlertColorInput!
}

type Alert {
    id: ID!
    schoolID: ID!
    school: School! @cost(complexity: 4)
    start: DateTime!
    end: DateTime!
    type: AlertType
    title: String!
    content: String!
    dismissable: Boolean!
}

input AlertInput {
    start: DateTime!
    end: DateTime!
    type: AlertTypeInput!
    title: String!
    content: String!
    dismissable: Boolean!
}